#lang racket
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CSCI 301, Winter 2021
;;
;; Lab #2
;;
;; Andrew Cary
;; W01291652
;; 
;; The purpose of this lab is to
;; write five functions with lists
;; that work together to create an
;; ordered powerset of a given input list.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide distribute
         subsets
         sublists
         element-ordered?
         length-ordered?
         )

;checks if two lists are in the right order relative to each other.
(define element-ordered?
  (lambda (list1 list2)
    (cond
                
      ;returns true if the lists are the same.
      [(equal? list1 list2) #t]

      ;returns true if the first different element is smaller in list 1.
      [(< (car list1) (car list2)) #t]
                
      ;returns false if the first different element is larger in list 1.
      [(> (car list1) (car list2)) #f]

      ;if the lists are different but the first element is the same,
      ;recurse without first element.
      [(= (car list1) (car list2))
       (element-ordered?(cdr list1) (cdr list2))]
               
      )))

;checks if a list is longer than the one after it.
(define length-ordered?
  (lambda (list1 list2)
    (cond
          
      ;returns true if list 1 is shorter.
      [(< (length list1) (length list2)) #t]

      ;returns the results of element-ordered
      ;if the lists are the same length.
      [(= (length list1) (length list2))
       (element-ordered? list1 list2)]

      ;returns false if list 1 is longer.
      [else #f]
      
      )))

;distributes a value throughout a list of lists.
(define distribute
  (lambda (value lists)
    (cond
      
      ;base case
        ;returns the last list in the lists, appends the value,
        ;and makes it a list of lists to stack with the rest of the recursive call.
      [(= (length lists) 1) (list (cons value (car lists)))]
      
      ;recursive conditional
      ;if the list of lists has more than one list, append the value to the first list, 
      ;make it a list of lists, then append it back to the rest of the lists with a recursive call.
      [(> (length lists) 1) (append (list (cons value (car lists)))
                                    (distribute value (cdr lists)))]
      )))

;returns all sublists.
(define sublists
  (lambda (list1)
    (cond
          
      ;base case.
      ;if the list is length 1,
      ;return the last element along with an empty list.
      [(= (length list1) 1) (append (list list1) (list empty))]
          
      ;recursive conditional.
      ;if a list is longer than length 1, return the combined returns of two recursive calls.
      ;the first distributes the first value of the list to the returned call,
      ;the second recurses without the distribution.
      [else (append (distribute (car list1) (sublists(cdr list1)))
                    (sublists(cdr list1)))]
      
      )))

;returns sorted sublists
(define subsets
  (lambda (list1)
    
    ;orders powerset of list1 by length and element
    (sort (sublists list1) length-ordered?)
    
    ))
    
(subsets '(1 4 2 3))
;output: '(() (1) (2) (3) (4) (1 2) (1 3) (1 4) (2 3) (4 2) (4 3) (1 2 3) (1 4 2) (1 4 3) (4 2 3) (1 4 2 3))
